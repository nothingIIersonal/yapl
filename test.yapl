$_entry(start)
$_exit(end)


fun ahaha(a, b, c)
{
	a = 2;
	b = 4 * a + 1;
	c = b + 1;

	{
		a = 3;
		a += 1;
		d = 2 * c;
	}
	d = 1;

	var_abc = a + b * (a + 3**2) % 2 - (a + (2 * b));
}


fun end()
{
	print("exit function successfully called\n\n");
}

fun get_num(value_1, value_2, value_3)
{
	return value_1 + value_2 + value_3;
}

fun get_value(value, degree)
{
    ret = get_num(2 * (3 - value), 2, 3);

	while (degree)
	{
		ret += 1;
		degree = degree - 1;
	}

	return ret;
}

pack pack_0
{
	fields : _field_0, _field_1;

	initial(value1, value2)
	{
		_field_0 = value1;
		_field_1 = value2;
	}

	fun get_v()
	{
		return _field_0 * _field_1 + 1;
	}
};

pack pack_1
{
	fields : _value_1, _value_2, _rec;

	initial(value1, value2)
	{
		_value_1 = value1;
		_value_2 = value2;
		_rec = [.pack_0(value1, value2)];
	}

	fun get_value()
	{
		return _value_1 * _value_2;
	}
};

pack pack_2
{
	fields: _pack_1, _value;
	
	initial(value)
	{
		_pack_1 = [.pack_1(value, value*2)];
		_value = value;
	}

	fun get_value()
	{
		return _pack_1.get_value();
	}
};

fun unar_test()
{
	var = --++--++var;
	var = !var&++var;
	var <<= 1;
	var = var << var;

	var_a = +-+-var;
	var_b = +-var + -(2**2);
	var_c = +-+2+-(-+-3+-2);
	var_d = 2 * ( var_a / (5) - 6 );

	var = var + 2;
}


fun emb_fun_test(time)
{
	var = 0;
	input(var, "enter 'var'> ");
	print("fasfas");
	print(1,var);
	sleep(time);
}

fun if_test()
{
	a = 2;
	b = 1;
	c = 2;
	d = 0;

	if (a)
	{
		if (b + 2)
		{
			return c;
		}
		elif (c)
		{
			return d;
		}

		return b;
	}
	elif (!d)
	{
		if (c)
		{
			++c;
		}
		else
		{
			--c;
		}
	}
	else
	{
		return 2;
	}
}

fun while_test()
{
	a = 1;
	b = 2;
	c = 3;
	d = 4;
	A = 5;
	x = 6;

	while (a)
	{
		while(b)
		{
			c;
		}

		while(d)
		{
			if (A)
			{
				while(x)
				{
					++x;
				}
			}
		}
		++a;
	}
}

fun get_0(a)
{
	print(a * 2);
}

fun get_1(a)
{
	get_0(a + 1);
}

fun get_str()
{
	return "str";
}

fun start()
{
	var_a = 5;
	var_b = 2 * ( (+-var_a) / (+-+-5) 		+ 6*(7 - 23**var_a)) - 2**5 + var_a - true;		
	var_c = "hello, 	wo\\r\\\"l\\\n\\\\";
	var_e = (((5+3)))*var_b+  12*(5+2)**2;
		
	print(var_a, var_b, var_c, var_e);   


	p_5 = [.pack_2(3)];
	print(p_5._pack_1._rec._field_0, " | ", p_5._pack_1._rec._field_1);

	list_1 = [.linked_list("num")];

	
	list_1.add(1);
	list_1.add(2);
	list_1.add(3);
	list_1.add(4);

	g_1 = list_1.get(0);
	g_2 = list_1.get(1);
	g_3 = list_1.get(2);
	g_4 = list_1.get(3);
	g_5 = list_1.get(4);

	print(g_1, " | ", g_2, " | ", g_3, " | ", g_4, " | ", g_5, "\n");

	list_1.remove(2);

	g_1 = list_1.get(0);
	g_2 = list_1.get(1);
	g_3 = list_1.get(2);
	g_4 = list_1.get(3);
	g_5 = list_1.get(4);

	print(g_1, " | ", g_2, " | ", g_3, " | ", g_4, " | ", g_5, "\n");

	list_1.insert(5, 1);

	g_1 = list_1.get(0);
	g_2 = list_1.get(1);
	g_3 = list_1.get(2);
	g_4 = list_1.get(3);
	g_5 = list_1.get(4);

	print(g_1, " | ", g_2, " | ", g_3, " | ", g_4, " | ", g_5, "\n");

	list_1.insert(6, 3);

	g_1 = list_1.get(0);
	g_2 = list_1.get(1);
	g_3 = list_1.get(2);
	g_4 = list_1.get(3);
	g_5 = list_1.get(4);

	print(g_1, " | ", g_2, " | ", g_3, " | ", g_4, " | ", g_5, "\n");

	list_1.insert(9, 0);

	g_1 = list_1.get(0);
	g_2 = list_1.get(1);
	g_3 = list_1.get(2);
	g_4 = list_1.get(3);
	g_5 = list_1.get(4);

	print(g_1, " | ", g_2, " | ", g_3, " | ", g_4, " | ", g_5, "\n");

	i = 0;
	s = "";
	while (i <= 30)
	{
		s += str(i);
		s += "|";
		++i;
	}

	print(s);
}
