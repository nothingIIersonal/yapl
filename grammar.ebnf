(*
  
  Yet another programming language grammar in EBNF

*)

--------------------------------------------------------------------------------------------------------------------------------------------------
lang                       ->              entry exit expr+ EOF
--------------------------------------------------------------------------------------------------------------------------------------------------
entry                      ->              ENTRY LEFT_BRACKET VAR RIGHT_BRACKET
--------------------------------------------------------------------------------------------------------------------------------------------------
exit                       ->              EXIT LEFT_BRACKET VAR RIGHT_BRACKET
--------------------------------------------------------------------------------------------------------------------------------------------------
expr                       ->              (assign_expr SEMICOLON)
                           |               (r_value_expr SEMICOLON)
                           |               (pack_expr SEMICOLON)
                           |               cycle_expr
                           |               if_expr
                           |               frame_expr
                           |               (embedded_func_expr SEMICOLON)
                           |               func_expr 
                           |               COMMENT
                           |               (BREAK SEMICOLON)
                           |               (RETURN return_expr? SEMICOLON)
--------------------------------------------------------------------------------------------------------------------------------------------------
embedded_structure_call    ->              linked_list_control_expr | hash_set_control_expr
--------------------------------------------------------------------------------------------------------------------------------------------------
pack_call                  ->              pack_method_call | pack_field_call
--------------------------------------------------------------------------------------------------------------------------------------------------
pack_method_call           ->              VAR (DOT VAR)+ LEFT_BRACKET param_func_call_expr? RIGHT_BRACKET
--------------------------------------------------------------------------------------------------------------------------------------------------
pack_field_call            ->              VAR (DOT VAR)+
--------------------------------------------------------------------------------------------------------------------------------------------------
pack_expr                  ->              PACK VAR pack_frame_expr
--------------------------------------------------------------------------------------------------------------------------------------------------
pack_frame_expr            ->              LEFT_BRACE 
                                           ( (FIELDS COLON VAR (COMMA VAR)* SEMICOLON)?
                                             (INITIAL LEFT_BRACKET (VAR (COMMA VAR)*)? RIGHT_BRACKET frame_expr)?
                                             (func_expr)
                                           )
                                           RIGHT_BRACE
--------------------------------------------------------------------------------------------------------------------------------------------------
return_expr                ->              (assign_expr | r_value_expr)
--------------------------------------------------------------------------------------------------------------------------------------------------
assign_expr                ->              l_value (ASSIGN_OP | ARITHM_ASSIGN_OP) r_value_expr
                           |               l_value (ASSIGN_OP | ARITHM_ASSIGN_OP) str_func_expr
                           |               l_value ASSIGN_OP array_expr
                           |               (l_value ASSIGN_OP 
                                           LEFT_SQUARE_BRACKETS
                                                     DOT 
                                                     (embedded_structure | pack_structure) 
                                                     (LEFT_BRACKET (r_value_expr (COMMA r_value_expr)*)? RIGHT_BRACKET)
                                           RIGHT_SQUARE_BRACKETS)
                           |               pack_field_call (ASSIGN_OP | ARITHM_ASSIGN_OP) r_value_expr
--------------------------------------------------------------------------------------------------------------------------------------------------
array_expr                 ->              LEFT_SQUARE_BRACKETS (r_value_expr (COMMA r_value_expr)*)? RIGHT_SQUARE_BRACKETS         
--------------------------------------------------------------------------------------------------------------------------------------------------
pack_structure             ->              VAR
--------------------------------------------------------------------------------------------------------------------------------------------------
linked_list_control_expr   ->              VAR DOT    (linked_list_add_expr)
                                                    | (linked_list_get_expr)
                                                    | (linked_list_remove_expr)
                                                    | (linked_list_insert_expr)
--------------------------------------------------------------------------------------------------------------------------------------------------
linked_list_add_expr       ->              ADD LEFT_BRACKET r_value_expr RIGHT_BRACKET
--------------------------------------------------------------------------------------------------------------------------------------------------
linked_list_get_expr       ->              GET LEFT_BRACKET INTEGER RIGHT_BRACKET
--------------------------------------------------------------------------------------------------------------------------------------------------
linked_list_remove_expr    ->              REMOVE LEFT_BRACKET INTEGER RIGHT_BRACKET
--------------------------------------------------------------------------------------------------------------------------------------------------
linked_list_insert_expr    ->              INSERT LEFT_BRACKET r_value_expr COMMA INTEGER RIGHT_BRACKET
--------------------------------------------------------------------------------------------------------------------------------------------------
hash_set_control_expr      ->              VAR DOT (ADD | CONTAINS | REMOVE) LEFT_BRACKET r_value_expr RIGHT_BRACKET
--------------------------------------------------------------------------------------------------------------------------------------------------
embedded_func_expr         ->              print_func_expr
                           |               input_func_expr
                           |               sleep_func_expr
                           |               str_func_expr
--------------------------------------------------------------------------------------------------------------------------------------------------                           
sleep_func_expr            ->              SLEEP LEFT_BRACKET (INTEGER | VAR)  RIGHT_BRACKET
--------------------------------------------------------------------------------------------------------------------------------------------------
print_func_expr            ->              PRINT LEFT_BRACKET (r_value (COMMA r_value)*)? RIGHT_BRACKET
--------------------------------------------------------------------------------------------------------------------------------------------------
input_func_expr            ->              INPUT LEFT_BRACKET l_value (COMMA STRING)? RIGHT_BRACKET
--------------------------------------------------------------------------------------------------------------------------------------------------
str_func_expr              ->              STR LEFT_BRACKET r_value RIGHT_BRACKET
--------------------------------------------------------------------------------------------------------------------------------------------------
embedded_structure         ->              LINKED_LIST
                           |               HASH_SET
--------------------------------------------------------------------------------------------------------------------------------------------------
r_value_expr               ->              func_call
                           |               embedded_structure_call
                           |               pack_call
                           |               value_expr
                           |               (LEFT_BRACKET r_value_expr RIGHT_BRACKET)
--------------------------------------------------------------------------------------------------------------------------------------------------
value_expr                 ->              var_expr 
                           |               arithm_expr
                           |               str_expr 
                           |               (LEFT_BRACKET value_expr RIGHT_BRACKET)
--------------------------------------------------------------------------------------------------------------------------------------------------
var_expr                   ->              (var_expr_binding [op_for_var_expr var_arithm_expr]*) 
--------------------------------------------------------------------------------------------------------------------------------------------------
arithm_expr                ->              (arithm_expr_binding [op_for_arithm_expr var_arithm_expr]*) 
--------------------------------------------------------------------------------------------------------------------------------------------------
var_arithm_expr            ->              (var_expr | arithm_expr)
--------------------------------------------------------------------------------------------------------------------------------------------------
str_expr                   ->              (str_expr_binding (ARITHM_OP_PREF str_expr)*)
--------------------------------------------------------------------------------------------------------------------------------------------------
var_expr_binding           ->              (ARITHM_OP_PREF* ARITHM_OP_UNARY* l_value ARITHM_OP_UNARY?) 
                           |               (ARITHM_OP_PREF* LEFT_BRACKET ARITHM_OP_UNARY* l_value RIGHT_BRACKET ARITHM_OP_UNARY?)
                           |               (LEFT_BRACKET var_expr RIGHT_BRACKET)
--------------------------------------------------------------------------------------------------------------------------------------------------
arithm_expr_binding        ->              (ARITHM_OP_PREF* num_expr)
                           |               (LEFT_BRACKET arithm_expr RIGHT_BRACKET)
--------------------------------------------------------------------------------------------------------------------------------------------------
str_expr_binding           ->              STRING
                           |               (LEFT_BRACKET str_expr RIGHT_BRACKET)
--------------------------------------------------------------------------------------------------------------------------------------------------
op_for_var_expr            ->              op_for_arithm_expr
--------------------------------------------------------------------------------------------------------------------------------------------------
op_for_arithm_expr         ->              ARITHM_OP_PREF | ARITHM_OP_BINARY | BIT_OP | LOGIC_OP | CMP_OP
--------------------------------------------------------------------------------------------------------------------------------------------------
num_expr                   ->              FLOAT
                           |               INTEGER 
                           |               CHAR
                           |               BOOLEAN
                           |               (LEFT_BRACKET num_expr RIGHT_BRACKET)
--------------------------------------------------------------------------------------------------------------------------------------------------
l_value                    ->              VAR
                           |               (LEFT_BRACKET l_value RIGHT_BRACKET)
--------------------------------------------------------------------------------------------------------------------------------------------------
r_value                    ->              func_call
                           |               pack_call
                           |               VAR
                           |               FLOAT 
                           |               INTEGER
                           |               BOOLEAN
                           |               STRING 
                           |               CHAR
                           |               (LEFT_BRACKET r_value RIGHT_BRACKET)
--------------------------------------------------------------------------------------------------------------------------------------------------
cycle_expr                 ->              do_while_cycle_expr 
                           |               while_cycle_expr
                           |               for_cycle_expr
--------------------------------------------------------------------------------------------------------------------------------------------------
if_expr                    ->              (IF cond_expr frame_expr)
                                           (ELIF cond_expr frame_expr)*
                                           (ELSE frame_expr)?
--------------------------------------------------------------------------------------------------------------------------------------------------
do_while_cycle_expr        ->              DO frame_expr WHILE cond_expr SEMICOLON
--------------------------------------------------------------------------------------------------------------------------------------------------
while_cycle_expr           ->              WHILE cond_expr frame_expr
--------------------------------------------------------------------------------------------------------------------------------------------------
for_cycle_expr             ->              FOR for_cond_expr frame_expr
--------------------------------------------------------------------------------------------------------------------------------------------------
for_cond_expr              ->              LEFT_BRACKET 
                                                    assign_expr? SEMICOLON
                                                    r_value_expr? SEMICOLON
                                                    (r_value_expr (COMMA r_value_expr)*)?
                                           RIGHT_BRACKET
--------------------------------------------------------------------------------------------------------------------------------------------------
cond_expr                  ->              LEFT_BRACKET r_value_expr RIGHT_BRACKET
--------------------------------------------------------------------------------------------------------------------------------------------------
func_expr                  ->              FUN VAR LEFT_BRACKET param_func_expr? RIGHT_BRACKET frame_expr
--------------------------------------------------------------------------------------------------------------------------------------------------
func_call                  ->              VAR LEFT_BRACKET param_func_call_expr? RIGHT_BRACKET
--------------------------------------------------------------------------------------------------------------------------------------------------
param_func_call_expr       ->              r_value (COMMA r_value)*
--------------------------------------------------------------------------------------------------------------------------------------------------
param_func_expr            ->              VAR (COMMA VAR)*
--------------------------------------------------------------------------------------------------------------------------------------------------
frame_expr                 ->              LEFT_BRACE expr* RIGHT_BRACE
--------------------------------------------------------------------------------------------------------------------------------------------------

(*

  Some examples (not all)

*)
_________________________________________________________________________________________________________________________________
EXAMPLES FOR func_expr:

fun get_num(value_1, value_2, value_3)
{
  return value_1 * value_2 * value_3 + 1;
}

fun get_value(value, degree)
{
  ret = get_num(value, degree, get_num(1, 2, 3));

  while (degree)
  {
    ret += value - (value + 1) ** degree;

    degree = degree - 1;
  }

  return ret;
}

_________________________________________________________________________________________________________________________________
EXAMPLES FOR r_value_expr:

a * ( 4 + 3 ) - 7 * 2 * (3 - 9)

(7 + 3 * (6 * number) ) - a

( (7 - num) * (8 - 2) - a ) + 2

((+7 - -1 + (9 - 5)))*3
+7
-------------------
-1
+
9
-------------------
5
*3

_________________________________________________________________________________________________________________________________
EXAMPLES FOR var_expr_binding:

var

- var
- ++--var
- (++--var)
- (++--(var))

- var++
- (--++var)++
- 

(- var)
(- ++--var)
(- (++--var))
(- ++--(var))
(- (++--var)++)

_________________________________________________________________________________________________________________________________
EXAMPLES FOR arithm_expr_binding:

5
-+-5
(5)
-(5)
-(+(-(5)))
-(+(-5))

_________________________________________________________________________________________________________________________________
EXAMPLES FOR str_expr_binding:

str
(str)

_________________________________________________________________________________________________________________________________
